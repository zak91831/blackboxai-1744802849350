"""
Vulnerability Alerting System for CacheXSSDetector.
Alerts users of detected vulnerabilities in real-time via console notifications and optional integrations.
"""

import asyncio
from typing import List, Callable, Optional
from ..core.scanner import Vulnerability
from ..utils.logger import get_logger

logger = get_logger(__name__)

class VulnerabilityAlertingSystem:
    """
    Monitors scanning results and alerts users in real-time.
    """

    def __init__(self, alert_callback: Optional[Callable[[Vulnerability], None]] = None):
        """
        Initialize the alerting system.
        
        Args:
            alert_callback (Optional[Callable[[Vulnerability], None]]): Optional callback to handle alerts
        """
        self.alert_callback = alert_callback
        self.active = False

    async def monitor(self, vulnerability_stream: asyncio.Queue):
        """
        Monitor a stream of vulnerabilities and alert users.
        
        Args:
            vulnerability_stream (asyncio.Queue): Queue of vulnerabilities detected
        """
        self.active = True
        logger.info("Vulnerability Alerting System started.")
        while self.active:
            try:
                vuln = await vulnerability_stream.get()
                if vuln:
                    self._alert(vuln)
                vulnerability_stream.task_done()
            except Exception as e:
                logger.error(f"Error in alerting system: {str(e)}")

    def _alert(self, vulnerability: Vulnerability):
        """
        Alert the user about a vulnerability.
        
        Args:
            vulnerability (Vulnerability): Vulnerability detected
        """
        try:
            message = (
                f"[ALERT] Vulnerability detected!\n"
                f"Type: {vulnerability.type}\n"
                f"URL: {vulnerability.url}\n"
                f"Severity: {vulnerability.severity}\n"
                f"Description: {vulnerability.description}"
            )
            logger.warning(message)
            if self.alert_callback:
                self.alert_callback(vulnerability)
        except Exception as e:
            logger.error(f"Failed to send alert: {str(e)}")

    def stop(self):
        """Stop the alerting system."""
        self.active = False
        logger.info("Vulnerability Alerting System stopped.")

if __name__ == "__main__":
    import asyncio
    from dataclasses import dataclass

    @dataclass
    class DummyVuln:
        type: str
        url: str
        description: str
        severity: str

    async def main():
        alert_system = VulnerabilityAlertingSystem()
        queue = asyncio.Queue()

        # Start monitoring in background
        asyncio.create_task(alert_system.monitor(queue))

        # Simulate vulnerabilities
        for i in range(3):
            vuln = DummyVuln(
                type="Cache-Based XSS",
                url=f"http://example.com/vuln{i}",
                description="Test vulnerability",
                severity="High"
            )
            await queue.put(vuln)
            await asyncio.sleep(1)

        await queue.join()
        alert_system.stop()

    asyncio.run(main())
